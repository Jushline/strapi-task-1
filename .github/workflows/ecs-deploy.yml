name: infra-and-deploy

on:
  push:
    branches: [ jushline ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: strapi-app
  IMAGE_TAG: latest
  CLUSTER: strapi-cluster-jushline
  SERVICE: strapi-app-jushline-service

jobs:
  terraform:
    name: Terraform apply
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply (create infra)
        working-directory: ./terraform
        run: terraform apply -auto-approve

  build_and_push:
    name: Build and push Docker image to ECR
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get AWS account ID
        id: acct
        run: |
          echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build, Tag & Push image
        run: |
          ECR_REG="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
          REPO="${ECR_REG}/${ECR_REPOSITORY}"

          # Create repo if not exists
          aws ecr describe-repositories --repository-names "${ECR_REPOSITORY}" --region $AWS_REGION || \
            aws ecr create-repository --repository-name "${ECR_REPOSITORY}" --region $AWS_REGION

          # Build and push
          docker build -t "${REPO}:${IMAGE_TAG}" .
          docker push "${REPO}:${IMAGE_TAG}"

      - name: Force new ECS deployment
        run: |
          aws ecs update-service \
            --cluster $CLUSTER \
            --service $SERVICE \
            --force-new-deployment \
            --region $AWS_REGION
